C51 COMPILER V9.50a   KEY                                                                  11/25/2019 21:04:01 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: D:\KeilC51\C51\BIN\C51.EXE driver\key.c BROWSE INCDIR(.\driver;.\config) DEBUG OBJECTEXTEND PRINT(.
                    -\key.lst) TABS(2) OBJECT(key.obj)

line level    source

   1          #include <STC12C5A60S2.H>
   2          #include "key.h"
   3          #include "stdio.h"
   4          #include "delay.h"
   5          
   6          
   7          
   8          static unsigned char KEY0_ReadPin(void)
   9          {
  10   1          return _KEY0;
  11   1      }
  12          
  13          // static unsigned char KEY1_ReadPin(void)
  14          // {
  15          //     return _KEY1;
  16          // }
  17          
  18          // static unsigned char KEY2_ReadPin(void)
  19          // {
  20          //     return _KEY2;
  21          // }
  22          
  23          static unsigned char KEY3_ReadPin(void)
  24          {
  25   1          return _KEY3;
  26   1      }
  27          
  28          
  29          // KEY_COMPONENTS Key_Buf[KEY_NUM] = {
  30          // {1,0,0,0,KEY_NULL,KEY_NULL,KEY0_ReadPin},
  31          // {1,0,0,0,KEY_NULL,KEY_NULL,KEY1_ReadPin},
  32          // {1,0,0,0,KEY_NULL,KEY_NULL,KEY2_ReadPin},
  33          // {1,0,0,0,KEY_NULL,KEY_NULL,KEY3_ReadPin},
  34          // };//µÚËÄ¸ö²ÎÊýKEY_DOWN_LEVEL±íÊ¾°´¼ü°´ÏÂÊ±IO¿ÚµÄµçÆ½  0£ºµÍµçÆ½  1£º¸ßµçÆ½  ÎÒµÄµçÂ·°´¼ü°´ÏÂÊÇµÍµçÆ½ Ëù
             -ÒÔÕâÀïÉèÖÃÎª0
  35          
  36          // //ÂÖÑ¯Ã¿¸ö°´¼üµÄµçÆ½ ²¢¸³Öµ¸ø¶ÔÓ¦µÄÐéÄâµçÆ½  
  37          // static void Get_Key_Level(void)
  38          // {
  39          //     unsigned char i;
  40          //     
  41          //     for(i = 0;i < KEY_NUM;i++)
  42          //     {
  43          //         if(Key_Buf[i].KEY_SHIELD == 0)
  44          //             continue;
  45          //         if(Key_Buf[i].READ_PIN() == Key_Buf[i].KEY_DOWN_LEVEL)
  46          //             Key_Buf[i].KEY_LEVEL = 1;//ÐéÄâµçÆ½ 1£º°´ÏÂ 0£ºÌ§Æð
  47          //         else
  48          //             Key_Buf[i].KEY_LEVEL = 0;
  49          //     }
  50          // }
  51          
  52          // void ReadKeyStatus(void)
  53          // {
C51 COMPILER V9.50a   KEY                                                                  11/25/2019 21:04:01 PAGE 2   

  54          //     unsigned char i;
  55          //     
  56          //     Get_Key_Level();
  57          //     
  58          //     for(i = 0;i < KEY_NUM;i++)
  59          //     {
  60          //         switch(Key_Buf[i].KEY_STATUS)
  61          //         {
  62          //             //×´Ì¬0£ºÃ»ÓÐ°´¼ü°´ÏÂ
  63          //             case KEY_NULL:
  64          //                 if(Key_Buf[i].KEY_LEVEL == 1)//ÓÐ°´¼ü°´ÏÂ
  65          //                 {
  66          //                     Key_Buf[i].KEY_STATUS = KEY_SURE;//×ªÈë×´Ì¬1
  67          //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
  68          //                 }
  69          //                 else
  70          //                 {
  71          //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
  72          //                 }
  73          //                 break;
  74          //             //×´Ì¬1£º°´¼ü°´ÏÂÈ·ÈÏ
  75          //             case KEY_SURE:
  76          //                 if(Key_Buf[i].KEY_LEVEL == 1)//È·ÈÏºÍÉÏ´ÎÏàÍ¬
  77          //                 {
  78          //                     Key_Buf[i].KEY_STATUS = KEY_DOWN;//×ªÈë×´Ì¬2
  79          //                     Key_Buf[i].KEY_EVENT = KEY_DOWN;//°´ÏÂÊÂ¼þ
  80          //                     Key_Buf[i].KEY_COUNT = 0;//¼ÆÊýÆ÷ÇåÁã
  81          //                    
  82          //                 }
  83          //                 else
  84          //                 {
  85          //                     Key_Buf[i].KEY_STATUS = KEY_NULL;//×ªÈë×´Ì¬0
  86          //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
  87          //                 }
  88          //                 break;
  89          //             //×´Ì¬2£º°´¼ü°´ÏÂ
  90          //             case KEY_DOWN:
  91          //                 if(Key_Buf[i].KEY_LEVEL != 1)//°´¼üÊÍ·Å£¬¶Ë¿Ú¸ßµçÆ½
  92          //                 {
  93          //                    // Key_Buf[i].KEY_STATUS = KEY_NULL;//×ªÈë×´Ì¬0
  94          //                     Key_Buf[i].KEY_EVENT = KEY_UP;//¿ÕÊÂ¼þ
  95          //                 }
  96          //                 else if((Key_Buf[i].KEY_LEVEL == 1))//³¬¹ý255Ã»ÓÐÊÍ·Å
  97          //                 {
  98          // //                     Key_Buf[i].KEY_STATUS = KEY_NULL;//×ªÈë×´Ì¬3
  99          // //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//³¤°´ÊÂ¼þ
 100          // //                     Key_Buf[i].KEY_COUNT = 0;//¼ÆÊýÆ÷ÇåÁã
 101          //                        
 102          //                      //while(Key_Buf[i].READ_PIN()==0);//µÈ´ý°´¼üÊÍ·Å
 103          //                      Key_Buf[i].KEY_STATUS = KEY_NULL;//×ªÈë×´Ì¬0
 104          //                       Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
 105          //                 }
 106          //                 else
 107          //                 {
 108          //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
 109          //                 }
 110          //                 break;
 111          //             //×´Ì¬3£º°´¼üÁ¬Ðø°´ÏÂ
 112          // //             case KEY_LONG:
 113          // //                 if(Key_Buf[i].KEY_LEVEL != 1)//°´¼üÊÍ·Å£¬¶Ë¿Ú¸ßµçÆ½
 114          // //                 {
 115          // //                     Key_Buf[i].KEY_STATUS = KEY_NULL;//×ªÈë×´Ì¬0
C51 COMPILER V9.50a   KEY                                                                  11/25/2019 21:04:01 PAGE 3   

 116          // //                     Key_Buf[i].KEY_EVENT = KEY_UP;//ËÉ¿ªÊÂ¼þ
 117          // //                     Key_Buf[i].KEY_EVENT = KEY_NULL;
 118          // //                 }
 119          // //                 else if((Key_Buf[i].KEY_LEVEL == 1) 
 120          // //                 && (++Key_Buf[i].KEY_COUNT >= KEY_LONG_DOWN_DELAY)) //³¬¹ýKEY_LONG_DOWN_DELAYÃ»ÓÐÊÍ·
             -Å
 121          // //                 {
 122          // //                     Key_Buf[i].KEY_EVENT = KEY_LONG;//³¤°´ÊÂ¼þ
 123          // //                     Key_Buf[i].KEY_COUNT = 0;//¼ÆÊýÆ÷ÇåÁã
 124          // //                 }
 125          // //                 else
 126          // //                 {
 127          // //                     Key_Buf[i].KEY_EVENT = KEY_NULL;//¿ÕÊÂ¼þ
 128          // //                 }
 129          // //                 break;
 130          //         }
 131          //     }
 132          // }
 133          
 134          
 135          //°´¼ü²âÊÔº¯Êý
 136          // void Task_KEY_Scan(void)
 137          // {
 138          //     ReadKeyStatus();
 139          //     
 140          //     if(Key_Buf[KEY0].KEY_EVENT == KEY_DOWN)
 141          //     {
 142          //         printf("SW3 Down\n");
 143          //     }
 144          //     
 145          //     if(Key_Buf[KEY1].KEY_EVENT == KEY_DOWN)
 146          //     {
 147          //         printf("SW4 Down\n");
 148          //     }
 149          //     
 150          //     if(Key_Buf[KEY2].KEY_EVENT == KEY_DOWN)
 151          //     {
 152          //         printf("SW5 Down\n");
 153          //     }
 154          //    if(Key_Buf[KEY3].KEY_EVENT == KEY_DOWN)
 155          //     {
 156          //         printf("SW6 Down\n");
 157          //     }
 158          
 159          // }
 160          
 161          /*unsigned char GetKey()
 162          {
 163              if(Key_Buf[KEY0].KEY_EVENT == KEY_UP)
 164              {
 165                 Key_Buf[KEY0].KEY_STATUS = KEY_NULL;
 166                 Key_Buf[KEY0].KEY_EVENT = KEY_NULL;
 167                 return 1;
 168              }
 169              
 170              else if(Key_Buf[KEY1].KEY_EVENT == KEY_UP)
 171              {
 172                  Key_Buf[KEY1].KEY_EVENT = KEY_NULL;
 173                  return 2;
 174              }
 175              
 176              else if(Key_Buf[KEY2].KEY_EVENT == KEY_UP)
C51 COMPILER V9.50a   KEY                                                                  11/25/2019 21:04:01 PAGE 4   

 177              {
 178                  Key_Buf[KEY2].KEY_EVENT = KEY_NULL;
 179                  return 3;
 180              }
 181              else if(Key_Buf[KEY3].KEY_EVENT == KEY_UP)
 182              {
 183                  Key_Buf[KEY3].KEY_EVENT = KEY_NULL;
 184                  return 4;
 185              }
 186              else
 187              {
 188                  return 0;
 189              }
 190          
 191          }*/
 192          
 193          unsigned char GetKey()
 194          {
 195   1         if(KEY0_ReadPin() == 0)//S4 °´ÏÂ
 196   1         {
 197   2            delay_ms(1);
 198   2            if(KEY0_ReadPin() == 0)
 199   2            {
 200   3              while(KEY0_ReadPin()==0);//µÈ´ý°´¼üÊÍ·Å
 201   3              return 1; 
 202   3            }            
 203   2         }
 204   1         else if(KEY3_ReadPin() == 0)//S1 °´ÏÂ
 205   1         {
 206   2            delay_ms(1);
 207   2            if(KEY3_ReadPin() == 0)
 208   2            {
 209   3              while(KEY3_ReadPin()==0);//µÈ´ý°´¼üÊÍ·Å
 210   3              return 4; 
 211   3            }            
 212   2         }
 213   1         return 0;
 214   1      }
 215          
 216          
 217          
 218          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     69    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
